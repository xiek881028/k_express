#!/usr/bin/env node

/**
 * 多项目配置信息
 */
var bagazhu = require('./webapp.json');
var con = require('../config/bagaConfig.js');
var fs	= require('fs');
for(project in bagazhu){
	/**
	 * Module dependencies.
	 * 模块依赖
	 */

	var app = require('../' + project + '/app');
	var debug = require('debug')('diankego:server');
	var http = require('http');

	/**
	 * Get port from environment and store in Express.
	 * 从运行环境与框架获得端口
	 */

	var port = normalizePort(process.env.PORT || bagazhu[project]);
	app.set('port', port);

	/**
	 * Create HTTP server.
	 * 创建http服务器
	 */

	var server = http.createServer(app);

	/**
	 * Listen on provided port, on all network interfaces.
	 * 在所有网络端口监听端口
	 */

	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);
};

//八嘎猪全局变量设置
global.baga = {};
baga.path = con.path();
baga.env = con.bagaConfig().env;

//注入前端依赖管理模块
//if(baga.env == 'dev'){
	var assets = require('../assetsUpload.js');
	baga.assets = assets.assets();
//};

/**
 * Normalize a port into a number, string, or false.
 * 将端口规范化为数字，字符串或是布尔值
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 * 监听http的错误事件
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 * 监听http的“监听”事件
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


